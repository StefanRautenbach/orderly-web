/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.OrderlywebDocumentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderlywebDocument extends TableImpl<OrderlywebDocumentRecord> {

    private static final long serialVersionUID = -584305920;

    /**
     * The reference instance of <code>orderlyweb_document</code>
     */
    public static final OrderlywebDocument ORDERLYWEB_DOCUMENT = new OrderlywebDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderlywebDocumentRecord> getRecordType() {
        return OrderlywebDocumentRecord.class;
    }

    /**
     * The column <code>orderlyweb_document.path</code>.
     */
    public final TableField<OrderlywebDocumentRecord, String> PATH = createField(DSL.name("path"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>orderlyweb_document.name</code>.
     */
    public final TableField<OrderlywebDocumentRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>orderlyweb_document.show</code>.
     */
    public final TableField<OrderlywebDocumentRecord, Integer> SHOW = createField(DSL.name("show"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>orderlyweb_document.display_name</code>.
     */
    public final TableField<OrderlywebDocumentRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orderlyweb_document.description</code>.
     */
    public final TableField<OrderlywebDocumentRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orderlyweb_document.parent</code>.
     */
    public final TableField<OrderlywebDocumentRecord, String> PARENT = createField(DSL.name("parent"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orderlyweb_document.is_file</code>.
     */
    public final TableField<OrderlywebDocumentRecord, Integer> IS_FILE = createField(DSL.name("is_file"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>orderlyweb_document.external</code>.
     */
    public final TableField<OrderlywebDocumentRecord, Integer> EXTERNAL = createField(DSL.name("external"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>orderlyweb_document</code> table reference
     */
    public OrderlywebDocument() {
        this(DSL.name("orderlyweb_document"), null);
    }

    /**
     * Create an aliased <code>orderlyweb_document</code> table reference
     */
    public OrderlywebDocument(String alias) {
        this(DSL.name(alias), ORDERLYWEB_DOCUMENT);
    }

    /**
     * Create an aliased <code>orderlyweb_document</code> table reference
     */
    public OrderlywebDocument(Name alias) {
        this(alias, ORDERLYWEB_DOCUMENT);
    }

    private OrderlywebDocument(Name alias, Table<OrderlywebDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderlywebDocument(Name alias, Table<OrderlywebDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OrderlywebDocument(Table<O> child, ForeignKey<O, OrderlywebDocumentRecord> key) {
        super(child, key, ORDERLYWEB_DOCUMENT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrderlywebDocumentRecord> getPrimaryKey() {
        return Keys.PK_ORDERLYWEB_DOCUMENT;
    }

    @Override
    public List<UniqueKey<OrderlywebDocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderlywebDocumentRecord>>asList(Keys.PK_ORDERLYWEB_DOCUMENT);
    }

    @Override
    public List<ForeignKey<OrderlywebDocumentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrderlywebDocumentRecord, ?>>asList(Keys.FK_ORDERLYWEB_DOCUMENT_ORDERLYWEB_DOCUMENT_1);
    }

    public OrderlywebDocument orderlywebDocument() {
        return new OrderlywebDocument(this, Keys.FK_ORDERLYWEB_DOCUMENT_ORDERLYWEB_DOCUMENT_1);
    }

    @Override
    public OrderlywebDocument as(String alias) {
        return new OrderlywebDocument(DSL.name(alias), this);
    }

    @Override
    public OrderlywebDocument as(Name alias) {
        return new OrderlywebDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderlywebDocument rename(String name) {
        return new OrderlywebDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderlywebDocument rename(Name name) {
        return new OrderlywebDocument(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, Integer, String, String, String, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
