/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.CustomFieldsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomFields extends TableImpl<CustomFieldsRecord> {

    private static final long serialVersionUID = -500954691;

    /**
     * The reference instance of <code>custom_fields</code>
     */
    public static final CustomFields CUSTOM_FIELDS = new CustomFields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomFieldsRecord> getRecordType() {
        return CustomFieldsRecord.class;
    }

    /**
     * The column <code>custom_fields.id</code>.
     */
    public final TableField<CustomFieldsRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>custom_fields.description</code>.
     */
    public final TableField<CustomFieldsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>custom_fields</code> table reference
     */
    public CustomFields() {
        this(DSL.name("custom_fields"), null);
    }

    /**
     * Create an aliased <code>custom_fields</code> table reference
     */
    public CustomFields(String alias) {
        this(DSL.name(alias), CUSTOM_FIELDS);
    }

    /**
     * Create an aliased <code>custom_fields</code> table reference
     */
    public CustomFields(Name alias) {
        this(alias, CUSTOM_FIELDS);
    }

    private CustomFields(Name alias, Table<CustomFieldsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CustomFields(Name alias, Table<CustomFieldsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CustomFields(Table<O> child, ForeignKey<O, CustomFieldsRecord> key) {
        super(child, key, CUSTOM_FIELDS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CustomFieldsRecord> getPrimaryKey() {
        return Keys.PK_CUSTOM_FIELDS;
    }

    @Override
    public List<UniqueKey<CustomFieldsRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomFieldsRecord>>asList(Keys.PK_CUSTOM_FIELDS);
    }

    @Override
    public CustomFields as(String alias) {
        return new CustomFields(DSL.name(alias), this);
    }

    @Override
    public CustomFields as(Name alias) {
        return new CustomFields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomFields rename(String name) {
        return new CustomFields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CustomFields rename(Name name) {
        return new CustomFields(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
