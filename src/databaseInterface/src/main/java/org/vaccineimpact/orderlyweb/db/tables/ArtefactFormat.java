/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.ArtefactFormatRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArtefactFormat extends TableImpl<ArtefactFormatRecord> {

    private static final long serialVersionUID = -530416833;

    /**
     * The reference instance of <code>artefact_format</code>
     */
    public static final ArtefactFormat ARTEFACT_FORMAT = new ArtefactFormat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArtefactFormatRecord> getRecordType() {
        return ArtefactFormatRecord.class;
    }

    /**
     * The column <code>artefact_format.name</code>.
     */
    public final TableField<ArtefactFormatRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>artefact_format</code> table reference
     */
    public ArtefactFormat() {
        this(DSL.name("artefact_format"), null);
    }

    /**
     * Create an aliased <code>artefact_format</code> table reference
     */
    public ArtefactFormat(String alias) {
        this(DSL.name(alias), ARTEFACT_FORMAT);
    }

    /**
     * Create an aliased <code>artefact_format</code> table reference
     */
    public ArtefactFormat(Name alias) {
        this(alias, ARTEFACT_FORMAT);
    }

    private ArtefactFormat(Name alias, Table<ArtefactFormatRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArtefactFormat(Name alias, Table<ArtefactFormatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ArtefactFormat(Table<O> child, ForeignKey<O, ArtefactFormatRecord> key) {
        super(child, key, ARTEFACT_FORMAT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ArtefactFormatRecord> getPrimaryKey() {
        return Keys.PK_ARTEFACT_FORMAT;
    }

    @Override
    public List<UniqueKey<ArtefactFormatRecord>> getKeys() {
        return Arrays.<UniqueKey<ArtefactFormatRecord>>asList(Keys.PK_ARTEFACT_FORMAT);
    }

    @Override
    public ArtefactFormat as(String alias) {
        return new ArtefactFormat(DSL.name(alias), this);
    }

    @Override
    public ArtefactFormat as(Name alias) {
        return new ArtefactFormat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtefactFormat rename(String name) {
        return new ArtefactFormat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArtefactFormat rename(Name name) {
        return new ArtefactFormat(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
