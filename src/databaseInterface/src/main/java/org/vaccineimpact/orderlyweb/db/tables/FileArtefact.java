/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.FileArtefactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FileArtefact extends TableImpl<FileArtefactRecord> {

    private static final long serialVersionUID = 1317969126;

    /**
     * The reference instance of <code>file_artefact</code>
     */
    public static final FileArtefact FILE_ARTEFACT = new FileArtefact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FileArtefactRecord> getRecordType() {
        return FileArtefactRecord.class;
    }

    /**
     * The column <code>file_artefact.id</code>.
     */
    public final TableField<FileArtefactRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>file_artefact.artefact</code>.
     */
    public final TableField<FileArtefactRecord, Integer> ARTEFACT = createField(DSL.name("artefact"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>file_artefact.file_hash</code>.
     */
    public final TableField<FileArtefactRecord, String> FILE_HASH = createField(DSL.name("file_hash"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>file_artefact.filename</code>.
     */
    public final TableField<FileArtefactRecord, String> FILENAME = createField(DSL.name("filename"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>file_artefact</code> table reference
     */
    public FileArtefact() {
        this(DSL.name("file_artefact"), null);
    }

    /**
     * Create an aliased <code>file_artefact</code> table reference
     */
    public FileArtefact(String alias) {
        this(DSL.name(alias), FILE_ARTEFACT);
    }

    /**
     * Create an aliased <code>file_artefact</code> table reference
     */
    public FileArtefact(Name alias) {
        this(alias, FILE_ARTEFACT);
    }

    private FileArtefact(Name alias, Table<FileArtefactRecord> aliased) {
        this(alias, aliased, null);
    }

    private FileArtefact(Name alias, Table<FileArtefactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FileArtefact(Table<O> child, ForeignKey<O, FileArtefactRecord> key) {
        super(child, key, FILE_ARTEFACT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<FileArtefactRecord> getPrimaryKey() {
        return Keys.PK_FILE_ARTEFACT;
    }

    @Override
    public List<UniqueKey<FileArtefactRecord>> getKeys() {
        return Arrays.<UniqueKey<FileArtefactRecord>>asList(Keys.PK_FILE_ARTEFACT);
    }

    @Override
    public List<ForeignKey<FileArtefactRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FileArtefactRecord, ?>>asList(Keys.FK_FILE_ARTEFACT_REPORT_VERSION_ARTEFACT_1, Keys.FK_FILE_ARTEFACT_FILE_1);
    }

    public ReportVersionArtefact reportVersionArtefact() {
        return new ReportVersionArtefact(this, Keys.FK_FILE_ARTEFACT_REPORT_VERSION_ARTEFACT_1);
    }

    public File file() {
        return new File(this, Keys.FK_FILE_ARTEFACT_FILE_1);
    }

    @Override
    public FileArtefact as(String alias) {
        return new FileArtefact(DSL.name(alias), this);
    }

    @Override
    public FileArtefact as(Name alias) {
        return new FileArtefact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FileArtefact rename(String name) {
        return new FileArtefact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FileArtefact rename(Name name) {
        return new FileArtefact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
