/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.ChangelogRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Changelog extends TableImpl<ChangelogRecord> {

    private static final long serialVersionUID = -1993995819;

    /**
     * The reference instance of <code>changelog</code>
     */
    public static final Changelog CHANGELOG = new Changelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangelogRecord> getRecordType() {
        return ChangelogRecord.class;
    }

    /**
     * The column <code>changelog.id</code>.
     */
    public final TableField<ChangelogRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>changelog.report_version</code>.
     */
    public final TableField<ChangelogRecord, String> REPORT_VERSION = createField(DSL.name("report_version"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>changelog.report_version_public</code>.
     */
    public final TableField<ChangelogRecord, String> REPORT_VERSION_PUBLIC = createField(DSL.name("report_version_public"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>changelog.label</code>.
     */
    public final TableField<ChangelogRecord, String> LABEL = createField(DSL.name("label"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>changelog.value</code>.
     */
    public final TableField<ChangelogRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>changelog.from_file</code>.
     */
    public final TableField<ChangelogRecord, Boolean> FROM_FILE = createField(DSL.name("from_file"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>changelog.ordering</code>.
     */
    public final TableField<ChangelogRecord, Integer> ORDERING = createField(DSL.name("ordering"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>changelog</code> table reference
     */
    public Changelog() {
        this(DSL.name("changelog"), null);
    }

    /**
     * Create an aliased <code>changelog</code> table reference
     */
    public Changelog(String alias) {
        this(DSL.name(alias), CHANGELOG);
    }

    /**
     * Create an aliased <code>changelog</code> table reference
     */
    public Changelog(Name alias) {
        this(alias, CHANGELOG);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Changelog(Table<O> child, ForeignKey<O, ChangelogRecord> key) {
        super(child, key, CHANGELOG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ChangelogRecord> getPrimaryKey() {
        return Keys.PK_CHANGELOG;
    }

    @Override
    public List<UniqueKey<ChangelogRecord>> getKeys() {
        return Arrays.<UniqueKey<ChangelogRecord>>asList(Keys.PK_CHANGELOG);
    }

    @Override
    public List<ForeignKey<ChangelogRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChangelogRecord, ?>>asList(Keys.FK_CHANGELOG_REPORT_VERSION_2, Keys.FK_CHANGELOG_REPORT_VERSION_1, Keys.FK_CHANGELOG_CHANGELOG_LABEL_1);
    }

    public ReportVersion fkChangelogReportVersion_2() {
        return new ReportVersion(this, Keys.FK_CHANGELOG_REPORT_VERSION_2);
    }

    public ReportVersion fkChangelogReportVersion_1() {
        return new ReportVersion(this, Keys.FK_CHANGELOG_REPORT_VERSION_1);
    }

    public ChangelogLabel changelogLabel() {
        return new ChangelogLabel(this, Keys.FK_CHANGELOG_CHANGELOG_LABEL_1);
    }

    @Override
    public Changelog as(String alias) {
        return new Changelog(DSL.name(alias), this);
    }

    @Override
    public Changelog as(Name alias) {
        return new Changelog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(String name) {
        return new Changelog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Changelog rename(Name name) {
        return new Changelog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, Boolean, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
