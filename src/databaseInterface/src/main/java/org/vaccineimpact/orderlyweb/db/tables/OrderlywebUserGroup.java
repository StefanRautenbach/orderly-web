/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.OrderlywebUserGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderlywebUserGroup extends TableImpl<OrderlywebUserGroupRecord> {

    private static final long serialVersionUID = 483718107;

    /**
     * The reference instance of <code>orderlyweb_user_group</code>
     */
    public static final OrderlywebUserGroup ORDERLYWEB_USER_GROUP = new OrderlywebUserGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderlywebUserGroupRecord> getRecordType() {
        return OrderlywebUserGroupRecord.class;
    }

    /**
     * The column <code>orderlyweb_user_group.id</code>.
     */
    public final TableField<OrderlywebUserGroupRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>orderlyweb_user_group.readonly</code>.
     */
    public final TableField<OrderlywebUserGroupRecord, Boolean> READONLY = createField(DSL.name("readonly"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>orderlyweb_user_group</code> table reference
     */
    public OrderlywebUserGroup() {
        this(DSL.name("orderlyweb_user_group"), null);
    }

    /**
     * Create an aliased <code>orderlyweb_user_group</code> table reference
     */
    public OrderlywebUserGroup(String alias) {
        this(DSL.name(alias), ORDERLYWEB_USER_GROUP);
    }

    /**
     * Create an aliased <code>orderlyweb_user_group</code> table reference
     */
    public OrderlywebUserGroup(Name alias) {
        this(alias, ORDERLYWEB_USER_GROUP);
    }

    private OrderlywebUserGroup(Name alias, Table<OrderlywebUserGroupRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderlywebUserGroup(Name alias, Table<OrderlywebUserGroupRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OrderlywebUserGroup(Table<O> child, ForeignKey<O, OrderlywebUserGroupRecord> key) {
        super(child, key, ORDERLYWEB_USER_GROUP);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrderlywebUserGroupRecord> getPrimaryKey() {
        return Keys.PK_ORDERLYWEB_USER_GROUP;
    }

    @Override
    public List<UniqueKey<OrderlywebUserGroupRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderlywebUserGroupRecord>>asList(Keys.PK_ORDERLYWEB_USER_GROUP);
    }

    @Override
    public OrderlywebUserGroup as(String alias) {
        return new OrderlywebUserGroup(DSL.name(alias), this);
    }

    @Override
    public OrderlywebUserGroup as(Name alias) {
        return new OrderlywebUserGroup(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderlywebUserGroup rename(String name) {
        return new OrderlywebUserGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderlywebUserGroup rename(Name name) {
        return new OrderlywebUserGroup(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
