/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.DataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Data extends TableImpl<DataRecord> {

    private static final long serialVersionUID = -570352337;

    /**
     * The reference instance of <code>data</code>
     */
    public static final Data DATA = new Data();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataRecord> getRecordType() {
        return DataRecord.class;
    }

    /**
     * The column <code>data.hash</code>.
     */
    public final TableField<DataRecord, String> HASH = createField(DSL.name("hash"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>data.size_csv</code>.
     */
    public final TableField<DataRecord, Long> SIZE_CSV = createField(DSL.name("size_csv"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>data.size_rds</code>.
     */
    public final TableField<DataRecord, Long> SIZE_RDS = createField(DSL.name("size_rds"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>data</code> table reference
     */
    public Data() {
        this(DSL.name("data"), null);
    }

    /**
     * Create an aliased <code>data</code> table reference
     */
    public Data(String alias) {
        this(DSL.name(alias), DATA);
    }

    /**
     * Create an aliased <code>data</code> table reference
     */
    public Data(Name alias) {
        this(alias, DATA);
    }

    private Data(Name alias, Table<DataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Data(Name alias, Table<DataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Data(Table<O> child, ForeignKey<O, DataRecord> key) {
        super(child, key, DATA);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DataRecord> getPrimaryKey() {
        return Keys.PK_DATA;
    }

    @Override
    public List<UniqueKey<DataRecord>> getKeys() {
        return Arrays.<UniqueKey<DataRecord>>asList(Keys.PK_DATA);
    }

    @Override
    public Data as(String alias) {
        return new Data(DSL.name(alias), this);
    }

    @Override
    public Data as(Name alias) {
        return new Data(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Data rename(String name) {
        return new Data(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Data rename(Name name) {
        return new Data(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
