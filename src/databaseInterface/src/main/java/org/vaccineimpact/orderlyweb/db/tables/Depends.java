/*
 * This file is generated by jOOQ.
 */
package org.vaccineimpact.orderlyweb.db.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.vaccineimpact.orderlyweb.db.DefaultSchema;
import org.vaccineimpact.orderlyweb.db.Keys;
import org.vaccineimpact.orderlyweb.db.tables.records.DependsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Depends extends TableImpl<DependsRecord> {

    private static final long serialVersionUID = -51391374;

    /**
     * The reference instance of <code>depends</code>
     */
    public static final Depends DEPENDS = new Depends();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DependsRecord> getRecordType() {
        return DependsRecord.class;
    }

    /**
     * The column <code>depends.id</code>.
     */
    public final TableField<DependsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>depends.report_version</code>.
     */
    public final TableField<DependsRecord, String> REPORT_VERSION = createField(DSL.name("report_version"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>depends.use</code>.
     */
    public final TableField<DependsRecord, Integer> USE = createField(DSL.name("use"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>depends.as</code>.
     */
    public final TableField<DependsRecord, String> AS = createField(DSL.name("as"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>depends.is_pinned</code>.
     */
    public final TableField<DependsRecord, Boolean> IS_PINNED = createField(DSL.name("is_pinned"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>depends.is_latest</code>.
     */
    public final TableField<DependsRecord, Boolean> IS_LATEST = createField(DSL.name("is_latest"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>depends</code> table reference
     */
    public Depends() {
        this(DSL.name("depends"), null);
    }

    /**
     * Create an aliased <code>depends</code> table reference
     */
    public Depends(String alias) {
        this(DSL.name(alias), DEPENDS);
    }

    /**
     * Create an aliased <code>depends</code> table reference
     */
    public Depends(Name alias) {
        this(alias, DEPENDS);
    }

    private Depends(Name alias, Table<DependsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Depends(Name alias, Table<DependsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Depends(Table<O> child, ForeignKey<O, DependsRecord> key) {
        super(child, key, DEPENDS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DependsRecord> getPrimaryKey() {
        return Keys.PK_DEPENDS;
    }

    @Override
    public List<UniqueKey<DependsRecord>> getKeys() {
        return Arrays.<UniqueKey<DependsRecord>>asList(Keys.PK_DEPENDS);
    }

    @Override
    public List<ForeignKey<DependsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DependsRecord, ?>>asList(Keys.FK_DEPENDS_REPORT_VERSION_1, Keys.FK_DEPENDS_FILE_ARTEFACT_1);
    }

    public ReportVersion reportVersion() {
        return new ReportVersion(this, Keys.FK_DEPENDS_REPORT_VERSION_1);
    }

    public FileArtefact fileArtefact() {
        return new FileArtefact(this, Keys.FK_DEPENDS_FILE_ARTEFACT_1);
    }

    @Override
    public Depends as(String alias) {
        return new Depends(DSL.name(alias), this);
    }

    @Override
    public Depends as(Name alias) {
        return new Depends(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Depends rename(String name) {
        return new Depends(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Depends rename(Name name) {
        return new Depends(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, String, Boolean, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
